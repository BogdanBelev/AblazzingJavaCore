package OOP.Inheritance.Lesson_6_InheritanceStart.dogs;

import OOP.Inheritance.Lesson_6_InheritanceStart.Alive;

/*
* Создаем родительский класс Dog
* В котором указываем основные методы, общие для всех собак
* Например, лаять - лают все собаки, значит наши наследники это:
* Пудель, овчарка и тд
*
* Класс не может наследовать от двух классов, то есть, например, и от Dog, и от Poodle.
* Но при этом можно создать цепочку - 1) всё живое дышит - 2) все собаки живые - 3) все овчарки собаки
* Значит все овчарки дышат
*
* Еще этот класс Dog является абстрактным, то есть собака в общем абстрактная, мы не можем просто создать собаку,
* можно сделать только собаку конкретного вида, породы. Это как группа чего-то, растения, животные и тд.
* И для того, чтобы указать это, нужно дописать в название класса
*           abstract
*
* Также можно создавать абстрактные методы, в случае, если каждый наследник реализует метод по-разному:
* Например, овчарка бегает быстро, а пудель - медленно
* Для этого также дописываем
*           abstract
* в метод, но без body (тела) - {}
*
* и нажимая горячие клавиши Ctrl+I создаем метод в наследнике
*
* Абстрактные методы реализуются только в неабстрактных классах
* Абстрактные классы вообще не реализуются сами, в раннере, только через неабстрактные классы
*
* ------
*
* Создаем два аргумента, которые присущи всем собакам:
*           public int countLegs = 4;   --- 4 ноги
            public int countTeeth;      --- зубы, но у всех пород разное кол-во зубов
            *
* Таким образом, создаем конструктор для  countTeeth
* который будет реализован в наследниках через ключевое слово  Super  через Alt+INS
*
*
* Если нам надо убрать возможность выводить атрибуты в Runner, то вместо public/private пишем protected
*
* --------
* Если нам надо, чтобы метод нельзя было перезаписать, просто дописываем final
* Также final можно дописывать к атрибутам, например, зафиксировать кол-во ног
*
* Если дописать static final, то атрибут превращается в КОНСТАНТУ - неизменяемое значение, которое принадлежит классу
* то есть одинаково используется во всех экземплярах (наименование капсом LATIN_NAME)
*
* */
public abstract class Dog extends Alive {
    protected final int countLegs = 4;
    public static final String LATIN_NAME = "Canis familiaris";
    public int countTeeth;

    public Dog(int countTeeth) {
        this.countTeeth = countTeeth;
    }

    public void beAngry(){
        System.out.println("The dog may bite");
    }
    public void bark(){
        System.out.println("The dog barks");
    }

    public final void dogEats(){
        System.out.println("The dog eats");
    }

    public abstract void run();


}
